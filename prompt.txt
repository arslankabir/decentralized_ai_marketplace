Requirements Prompt for AI Code Generator
Project Title: AI-Powered Decentralized Task Marketplace

Description: Build an MVP for a decentralized task marketplace leveraging AI and blockchain technologies. The platform should allow users to create tasks, recommend freelancers using AI, validate work, and facilitate secure payments using smart contracts.

Technologies to Use:
Blockchain: Ethereum Sepolia Testnet
Smart Contracts Framework: OpenZeppelin
Node Provider: Alchemy (for blockchain connectivity and debugging)
Backend: Django
Frontend: ReactJS
AI Framework: TensorFlow
Libraries: web3.py (backend), ethers.js (frontend)
Requirements
Smart Contract Development

Create a Solidity smart contract with the following functions:
createTask: Allows task creation with details (title, description, budget). Locks funds in escrow.
assignTask: Assigns a freelancer to the task.
submitWork: Freelancer submits completed work.
validateAndReleaseFunds: Validates work and releases funds if approved.
Use OpenZeppelin for secure patterns (e.g., Escrow, Ownable).
Deploy the smart contract on the Ethereum Sepolia Testnet via Alchemy.
Frontend (ReactJS)

Build a ReactJS interface to:
Allow users to create tasks and connect their MetaMask wallets.
Display freelancer recommendations (from the AI model).
Show task status (real-time updates using Alchemy).
Enable work submission and payment release.
Backend (Django)

Set up a Django REST API to handle:
User and task data storage.
AI model predictions (freelancer recommendation, work validation).
Integrate with the Sepolia Testnet via web3.py using Alchemy’s RPC endpoints.
AI Models (TensorFlow)

Freelancer Recommendation Model:
Train a simple TensorFlow model to recommend freelancers based on task descriptions and mock freelancer data.
Work Validation Model:
Implement a pre-trained text similarity model (e.g., Universal Sentence Encoder) to validate work submissions.
Blockchain Connectivity (Alchemy)

Use Alchemy to:
Interact with the Sepolia Testnet for smart contract transactions.
Subscribe to blockchain events for task lifecycle updates (e.g., TaskCreated, PaymentReleased).
Real-Time Updates:

Use Alchemy’s WebSocket or API to fetch real-time transaction and event updates for the frontend.
Deliverable:
A functional MVP showcasing:

Task creation and fund locking.
AI-powered freelancer recommendations.
Work validation and secure payment release.
Additional Notes:

Ensure the MVP is designed for ease of demonstration in an interview setting.
Provide a README with instructions to run the project locally.
